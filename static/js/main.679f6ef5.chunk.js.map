{"version":3,"sources":["tasc/main.js","App.js","serviceWorker.js","index.js"],"names":["Main","state","data","sort","currentPage","namesPerPage","handleClick","event","i","setState","handleClickId","sortArrayUp","sortArrayDown","handleClickName","sortNameUp","sortNameDown","handleClickCity","sortCityUp","sortCityDown","array","a","b","id","name","localeCompare","city","fetch","then","response","json","catch","err","log","this","indexOfLast","indexOfFirst","elements","slice","map","key","className","pageNumbers","element","onClick","e","push","Math","ceil","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.679f6ef5.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass Main extends Component {\n\n    state = {\n        data: [],\n        sort: null,\n        currentPage: 1,\n        namesPerPage: 15\n    };\n\n    handleClick = (event, i) => {\n        this.setState({\n            currentPage: i\n        })\n    };\n\n    handleClickId = () => {\n        if (this.state.sort === null) {\n            this.setState({sort: 1}); this.sortArrayUp(this.state.data)\n        } else if (this.state.sort === 1) {\n            this.setState({sort: 2}); this.sortArrayDown(this.state.data)\n        } else if (this.state.sort === 2) {\n            this.setState({sort: 1}); this.sortArrayUp(this.state.data)\n        }\n    };\n\n    handleClickName = () => {\n        if (this.state.sort === null) {\n            this.setState({sort: 1}); this.sortNameUp(this.state.data);\n        } else if (this.state.sort === 1) {\n            this.setState({sort: 2}); this.sortNameDown(this.state.data)\n        } else if (this.state.sort === 2) {\n            this.setState({sort: 1}); this.sortNameUp(this.state.data)\n        }\n    };\n\n    handleClickCity = () => {\n        if (this.state.sort === null) {\n            this.setState({sort: 1}); this.sortCityUp(this.state.data);\n        } else if (this.state.sort === 1) {\n            this.setState({sort: 2}); this.sortCityDown(this.state.data)\n        } else if (this.state.sort === 2) {\n            this.setState({sort: 1}); this.sortCityUp(this.state.data)\n        }\n    };\n\n    componentDidMount() {\n        fetch('https://recruitment.hal.skygate.io/companies')\n            .then(response => response.json())\n            .then(data => this.setState({data}))\n            .catch(err => err.log(err));\n    }\n\n    sortArrayUp = (array) => {\n        array.sort(function (a, b) {\n            return a.id - b.id;\n        });\n        return array\n    };\n\n    sortArrayDown = (array) => {\n        array.sort(function (a, b) {\n            return b.id - a.id;\n        });\n        return array\n    };\n\n    sortNameUp = (array) => {\n        array.sort(function (a, b) {\n            return a.name.localeCompare( b.name );\n        });\n        return array\n    };\n\n    sortNameDown = (array) => {\n        array.sort(function (a, b) {\n            return b.name.localeCompare( a.name );\n        });\n        return array\n    };\n\n    sortCityUp = (array) => {\n        array.sort(function (a, b) {\n            return a.city.localeCompare( b.city );\n        });\n        return array\n    };\n\n    sortCityDown = (array) => {\n        array.sort(function (a, b) {\n            return b.city.localeCompare( a.city );\n        });\n        return array\n    };\n\n    render() {\n\n        const {data, currentPage, namesPerPage} = this.state;\n        const indexOfLast = currentPage * namesPerPage;\n        const indexOfFirst = indexOfLast - namesPerPage;\n        const currentData = data.slice(indexOfFirst, indexOfLast);\n\n        const elements = currentData.map((name, i) => {\n            return (\n                <tr key={name.id}>\n                    <th className='button1'>{name.id}</th>\n                    <th className='button1'>{name.name}</th>\n                    <th className='button1'>{name.city}</th>\n                </tr>\n            )\n        });\n\n        const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(data.length / namesPerPage); i++) {\n\n                const element = <button key={i}\n                                        onClick={e => this.handleClick(e, i)}\n                                        className={this.state.currentPage === i ? 'active' : ''}\n                >\n                    {i} </button>;\n                pageNumbers.push(element)\n\n        }\n\n        return (\n            <>\n                <section>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th className='button' onClick={this.handleClickId}>ID</th>\n                            <th className='button' onClick={this.handleClickName}>NAME</th>\n                            <th className='button' onClick={this.handleClickCity}>CITY</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {elements}\n                        </tbody>\n                    </table>\n                    <ul className='numbers'> {pageNumbers} </ul>\n                </section>\n            </>\n        )\n    }\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './tasc/main'\n\n\nfunction App() {\n    return (\n        <Main/>\n    );}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}